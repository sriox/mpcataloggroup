/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.product.master.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.miso4204.product.logic.dto.ProductDTO;
import co.edu.uniandes.csw.miso4204.product.logic.api.IProductLogicService;
import co.edu.uniandes.csw.miso4204.product.master.logic.api._IProductMasterLogicService;
import co.edu.uniandes.csw.miso4204.product.master.logic.dto.ProductMasterDTO;
import co.edu.uniandes.csw.miso4204.feature.logic.api.IFeatureLogicService;
import co.edu.uniandes.csw.miso4204.picture.logic.api.IPictureLogicService;
import co.edu.uniandes.csw.miso4204.feature.logic.dto.FeatureDTO;
import co.edu.uniandes.csw.miso4204.picture.logic.dto.PictureDTO;
import javax.inject.Inject;
import javax.ejb.EJB;


public abstract class _ProductMasterMockLogicService implements _IProductMasterLogicService {

    protected static ArrayList<ProductMasterDTO> productMasterDtosList = new ArrayList<ProductMasterDTO>() ;
    @Inject
    protected IFeatureLogicService featurePersistance;
    @Inject
    protected IPictureLogicService picturePersistance;
    @Inject
    protected IProductLogicService productPersistance;

    public ProductMasterDTO createMasterProduct(ProductMasterDTO product) {

        productPersistance.createProduct(product.getProductEntity());
        for (PictureDTO dto : product.getCreatepicture()) {
            product.getListpicture().add(picturePersistance.createPicture(dto));
        }
        for (FeatureDTO dto : product.getCreatefeature()) {
            product.getListfeature().add(featurePersistance.createFeature(dto));
        }
        productMasterDtosList.add(product);
        return product;
    }

    public ProductMasterDTO getMasterProduct(Long id) {
        for (ProductMasterDTO productMasterDTO : productMasterDtosList) {
            if (productMasterDTO.getProductEntity().getId() == id) {
                return productMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterProduct(Long id) {
        for (ProductMasterDTO productMasterDTO : productMasterDtosList) {
            if (productMasterDTO.getProductEntity().getId() == id) {

                for (PictureDTO dto : productMasterDTO.getCreatepicture()) {
                    picturePersistance.deletePicture(dto.getId());
                }
                productPersistance.deleteProduct(productMasterDTO.getId());
                productMasterDtosList.remove(productMasterDTO);
                for (FeatureDTO dto : productMasterDTO.getCreatefeature()) {
                    featurePersistance.deleteFeature(dto.getId());
                }
                productPersistance.deleteProduct(productMasterDTO.getId());
                productMasterDtosList.remove(productMasterDTO);
            }
        }

    }

    public void updateMasterProduct(ProductMasterDTO product) {

		ProductMasterDTO currentProduct = getMasterProduct(product.getProductEntity().getId());
		if (currentProduct == null) {
			currentProduct = product;
		}else{
			productMasterDtosList.remove(currentProduct);
		}

        // update Picture
        if (product.getUpdatepicture() != null) {
            for (PictureDTO dto : product.getUpdatepicture()) {
                picturePersistance.updatePicture(dto);
                for (PictureDTO picturedto : currentProduct.getListpicture()) {
					if (picturedto.getId() == dto.getId()) {
						currentProduct.getListpicture().remove(picturedto);
						currentProduct.getListpicture().add(dto);
					}
				}
            }
        }
        // persist new Picture
        if (product.getCreatepicture() != null) {
            for (PictureDTO dto : product.getCreatepicture()) {
                PictureDTO persistedPictureDTO = picturePersistance.createPicture(dto);
                dto = persistedPictureDTO;
                currentProduct.getListpicture().add(dto);
            }
        }
        // delete Picture
        if (product.getDeletepicture() != null) {
            for (PictureDTO dto : product.getDeletepicture()) {
				for (PictureDTO picturedto : currentProduct.getListpicture()) {
					if (picturedto.getId() == dto.getId()) {
						currentProduct.getListpicture().remove(picturedto);
					}
				}
                picturePersistance.deletePicture(dto.getId());
            }
        }
        // update Feature
        if (product.getUpdatefeature() != null) {
            for (FeatureDTO dto : product.getUpdatefeature()) {
                featurePersistance.updateFeature(dto);
                for (FeatureDTO featuredto : currentProduct.getListfeature()) {
					if (featuredto.getId() == dto.getId()) {
						currentProduct.getListfeature().remove(featuredto);
						currentProduct.getListfeature().add(dto);
					}
				}
            }
        }
        // persist new Feature
        if (product.getCreatefeature() != null) {
            for (FeatureDTO dto : product.getCreatefeature()) {
                FeatureDTO persistedFeatureDTO = featurePersistance.createFeature(dto);
                dto = persistedFeatureDTO;
                currentProduct.getListfeature().add(dto);
            }
        }
        // delete Feature
        if (product.getDeletefeature() != null) {
            for (FeatureDTO dto : product.getDeletefeature()) {
				for (FeatureDTO featuredto : currentProduct.getListfeature()) {
					if (featuredto.getId() == dto.getId()) {
						currentProduct.getListfeature().remove(featuredto);
					}
				}
                featurePersistance.deleteFeature(dto.getId());
            }
        }
        productMasterDtosList.add(currentProduct);
    }
}