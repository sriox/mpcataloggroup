/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.purchase.master.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.miso4204.purchase.logic.dto.PurchaseDTO;
import co.edu.uniandes.csw.miso4204.purchase.logic.api.IPurchaseLogicService;
import co.edu.uniandes.csw.miso4204.purchase.master.logic.api._IPurchaseMasterLogicService;
import co.edu.uniandes.csw.miso4204.purchase.master.logic.dto.PurchaseMasterDTO;
import co.edu.uniandes.csw.miso4204.purchaseitem.logic.api.IPurchaseItemLogicService;
import co.edu.uniandes.csw.miso4204.payment.logic.api.IPaymentLogicService;
import co.edu.uniandes.csw.miso4204.purchaseitem.logic.dto.PurchaseItemDTO;
import co.edu.uniandes.csw.miso4204.payment.logic.dto.PaymentDTO;
import javax.inject.Inject;
import javax.ejb.EJB;


public abstract class _PurchaseMasterMockLogicService implements _IPurchaseMasterLogicService {

    protected static ArrayList<PurchaseMasterDTO> purchaseMasterDtosList = new ArrayList<PurchaseMasterDTO>() ;
    @Inject
    protected IPurchaseItemLogicService purchaseItemPersistance;
    @Inject
    protected IPaymentLogicService paymentPersistance;
    @Inject
    protected IPurchaseLogicService purchasePersistance;

    public PurchaseMasterDTO createMasterPurchase(PurchaseMasterDTO purchase) {

        purchasePersistance.createPurchase(purchase.getPurchaseEntity());
        for (PurchaseItemDTO dto : purchase.getCreatepurchaseItem()) {
            purchase.getListpurchaseItem().add(purchaseItemPersistance.createPurchaseItem(dto));
        }
        for (PaymentDTO dto : purchase.getCreatepayment()) {
            purchase.getListpayment().add(paymentPersistance.createPayment(dto));
        }
        purchaseMasterDtosList.add(purchase);
        return purchase;
    }

    public PurchaseMasterDTO getMasterPurchase(Long id) {
        for (PurchaseMasterDTO purchaseMasterDTO : purchaseMasterDtosList) {
            if (purchaseMasterDTO.getPurchaseEntity().getId() == id) {
                return purchaseMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterPurchase(Long id) {
        for (PurchaseMasterDTO purchaseMasterDTO : purchaseMasterDtosList) {
            if (purchaseMasterDTO.getPurchaseEntity().getId() == id) {

                for (PurchaseItemDTO dto : purchaseMasterDTO.getCreatepurchaseItem()) {
                    purchaseItemPersistance.deletePurchaseItem(dto.getId());
                }
                purchasePersistance.deletePurchase(purchaseMasterDTO.getId());
                purchaseMasterDtosList.remove(purchaseMasterDTO);
                for (PaymentDTO dto : purchaseMasterDTO.getCreatepayment()) {
                    paymentPersistance.deletePayment(dto.getId());
                }
                purchasePersistance.deletePurchase(purchaseMasterDTO.getId());
                purchaseMasterDtosList.remove(purchaseMasterDTO);
            }
        }

    }

    public void updateMasterPurchase(PurchaseMasterDTO purchase) {

		PurchaseMasterDTO currentPurchase = getMasterPurchase(purchase.getPurchaseEntity().getId());
		if (currentPurchase == null) {
			currentPurchase = purchase;
		}else{
			purchaseMasterDtosList.remove(currentPurchase);
		}

        // update PurchaseItem
        if (purchase.getUpdatepurchaseItem() != null) {
            for (PurchaseItemDTO dto : purchase.getUpdatepurchaseItem()) {
                purchaseItemPersistance.updatePurchaseItem(dto);
                for (PurchaseItemDTO purchaseItemdto : currentPurchase.getListpurchaseItem()) {
					if (purchaseItemdto.getId() == dto.getId()) {
						currentPurchase.getListpurchaseItem().remove(purchaseItemdto);
						currentPurchase.getListpurchaseItem().add(dto);
					}
				}
            }
        }
        // persist new PurchaseItem
        if (purchase.getCreatepurchaseItem() != null) {
            for (PurchaseItemDTO dto : purchase.getCreatepurchaseItem()) {
                PurchaseItemDTO persistedPurchaseItemDTO = purchaseItemPersistance.createPurchaseItem(dto);
                dto = persistedPurchaseItemDTO;
                currentPurchase.getListpurchaseItem().add(dto);
            }
        }
        // delete PurchaseItem
        if (purchase.getDeletepurchaseItem() != null) {
            for (PurchaseItemDTO dto : purchase.getDeletepurchaseItem()) {
				for (PurchaseItemDTO purchaseItemdto : currentPurchase.getListpurchaseItem()) {
					if (purchaseItemdto.getId() == dto.getId()) {
						currentPurchase.getListpurchaseItem().remove(purchaseItemdto);
					}
				}
                purchaseItemPersistance.deletePurchaseItem(dto.getId());
            }
        }
        // update Payment
        if (purchase.getUpdatepayment() != null) {
            for (PaymentDTO dto : purchase.getUpdatepayment()) {
                paymentPersistance.updatePayment(dto);
                for (PaymentDTO paymentdto : currentPurchase.getListpayment()) {
					if (paymentdto.getId() == dto.getId()) {
						currentPurchase.getListpayment().remove(paymentdto);
						currentPurchase.getListpayment().add(dto);
					}
				}
            }
        }
        // persist new Payment
        if (purchase.getCreatepayment() != null) {
            for (PaymentDTO dto : purchase.getCreatepayment()) {
                PaymentDTO persistedPaymentDTO = paymentPersistance.createPayment(dto);
                dto = persistedPaymentDTO;
                currentPurchase.getListpayment().add(dto);
            }
        }
        // delete Payment
        if (purchase.getDeletepayment() != null) {
            for (PaymentDTO dto : purchase.getDeletepayment()) {
				for (PaymentDTO paymentdto : currentPurchase.getListpayment()) {
					if (paymentdto.getId() == dto.getId()) {
						currentPurchase.getListpayment().remove(paymentdto);
					}
				}
                paymentPersistance.deletePayment(dto.getId());
            }
        }
        purchaseMasterDtosList.add(currentPurchase);
    }
}